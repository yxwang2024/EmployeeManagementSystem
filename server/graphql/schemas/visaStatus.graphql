type VisaStatus {
  _id: ID!
  employee: ID!
  step: String
  status: String
  hrFeedback: String
  workAuthorization: WorkAuthorization!
  documents: [Document]
}

type VisaStatusResponse {
  _id: ID!
  employee: Employee!
  step: String
  status: String
  hrFeedback: String
  workAuthorization: WorkAuthorization
  documents: [Document]
}

type WorkAuthorization {
  title: String!
  startDate: String!
  endDate: String!
}

input WorkAuthorizationInput {
  title: String!
  startDate: String!
  endDate: String!
}

input VisaStatusInput {
  employee: ID!
  step: String
  status: String
  hrFeedback: String
  workAuthorization: WorkAuthorizationInput!
  documents: [ID]
}


type VisaStatusEdge {
  cursor: String
  node: VisaStatusResponse
}

type PageInfo {
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
  endCursor: String
}

type VisaStatusConnection {
  totalCount: Int
  edges: [VisaStatusEdge]
  pageInfo: PageInfo
}
input NotificationInput{
  email:String
  nextStep:String
}

extend type Query {
  getVisaStatuses: [VisaStatusResponse]
  getVisaStatus(id: ID!): VisaStatusResponse
  getVisaStatusByEmployee(employeeId: ID!): VisaStatus
  getVisaStatusWithQuery(query: String!): [VisaStatusResponse]
  getVisaStatusConnection(
    first: Int
    after: String
    last: Int
    before: String
    query: String
    status: String
  ): VisaStatusConnection
}

extend type Mutation {
  createVisaStatus(visaStatusInput: VisaStatusInput): VisaStatus
  updateVisaStatus(id: ID!, visaStatusInput: VisaStatusInput): VisaStatus
  approveVisaStatus(id: ID!): VisaStatus
  moveToNextStep(id: ID!): VisaStatus
  rejectVisaStatus(id: ID!, hrFeedback: String!): VisaStatus
  addDocument(id: ID!, documentId: ID!): VisaStatus
  reUploadDocument(id: ID!, documentId: ID!): VisaStatus
  deleteVisaStatus(id: ID!): String
  sendNotification(notificationInput:NotificationInput):String
}
